/**
 * Part of Wingows - Win32 API layer for Go
 * https://github.com/rodrigocfd/wingows
 * This library is released under the MIT license.
 */

package ui

import (
	"unsafe"
	"wingows/api"
	"wingows/co"
)

var (
	globalUiFont = Font{} // created in RunAsMain(), freed in runMainLoop()
)

// Main application window.
// Allows message and notification handling.
type WindowMain struct {
	windowBase
	setup windowMainSetup
}

// Exposes parameters that will be used to create the window.
func (me *WindowMain) Setup() *windowMainSetup {
	me.setup.initOnce() // guard
	return &me.setup
}

// Creates the main window and runs the main application loop.
func (me *WindowMain) RunAsMain() {
	if api.IsWindowsVistaOrGreater() {
		api.SetProcessDPIAware()
	}
	api.InitCommonControls()

	me.setup.initOnce() // guard
	hInst := api.GetModuleHandle("")
	me.windowBase.registerClass(me.setup.genWndClassEx(hInst))

	globalUiFont.CreateUi() // create global font to be applied everywhere

	me.windowBase.OnMsg().WmNcDestroy(func() { // default WM_NCDESTROY handling
		api.PostQuitMessage(0)
	})

	cxScreen := api.GetSystemMetrics(co.SM_CXSCREEN) // retrieve screen size
	cyScreen := api.GetSystemMetrics(co.SM_CYSCREEN)

	_, _, cx, cy := multiplyByDpi(0, 0, me.setup.Width, me.setup.Height)

	me.windowBase.createWindow("WindowMain", me.setup.ExStyle,
		me.setup.ClassName, me.setup.Title, me.setup.Style,
		cxScreen/2-int32(cx)/2, cyScreen/2-int32(cy)/2, // center window on screen
		me.setup.Width, me.setup.Height, nil, me.setup.HMenu, hInst)

	me.windowBase.Hwnd().ShowWindow(me.setup.CmdShow)
	me.windowBase.Hwnd().UpdateWindow()

	me.runMainLoop()
}

func (me *WindowMain) runMainLoop() {
	defer globalUiFont.Destroy()

	msg := api.MSG{}
	for {
		status := msg.GetMessage(api.HWND(0), 0, 0)
		if status == 0 {
			break // WM_QUIT was sent, gracefully terminate the program
		}

		if me.isModelessMsg() { // does this message belong to a modeless child (if any)?
			continue
		}

		// TODO haccel check !!!

		if me.windowBase.Hwnd().IsDialogMessage(&msg) { // processes all keyboard actions for our child controls
			continue
		}

		msg.TranslateMessage()
		msg.DispatchMessage()
	}
}

func (me *WindowMain) isModelessMsg() bool {
	return false
}

//------------------------------------------------------------------------------

type windowMainSetup struct {
	wasInit bool // default to false

	ClassName        string      // Optional, defaults to a hash generated by WNDCLASSEX parameters. Passed to RegisterClassEx.
	ClassStyle       co.CS       // Window class style, passed to RegisterClassEx.
	HIcon            api.HICON   // Icon associated with the window, passed to RegisterClassEx.
	HCursor          api.HCURSOR // Window cursor, passed to RegisterClassEx.
	HBrushBackground api.HBRUSH  // Window background brush, passed to RegisterClassEx.
	HIconSmall       api.HICON   // Small icon associated with the window, passed to RegisterClassEx.

	Title   string    // The title of the window, passed to CreateWindowEx.
	Width   uint32    // Initial width of the window, passed to CreateWindowEx.
	Height  uint32    // Initial height of the window, passed to CreateWindowEx.
	Style   co.WS     // Window style, passed to CreateWindowEx.
	ExStyle co.WS_EX  // Window extended style, passed to CreateWindowEx.
	HMenu   api.HMENU // Main window menu, passed to CreateWindowEx.

	CmdShow co.SW // Passed to ShowWindow, defaults to SW_SHOW.
}

func (me *windowMainSetup) initOnce() {
	if !me.wasInit {
		me.wasInit = true

		me.ClassStyle = co.CS_DBLCLKS

		me.Width = 600 // arbitrary dimensions
		me.Height = 500
		me.Style = co.WS_CAPTION | co.WS_SYSMENU | co.WS_CLIPCHILDREN | co.WS_BORDER
		me.ExStyle = co.WS_EX(0)

		me.CmdShow = co.SW_SHOW
	}
}

func (me *windowMainSetup) genWndClassEx(hInst api.HINSTANCE) *api.WNDCLASSEX {
	wcx := api.WNDCLASSEX{}

	wcx.CbSize = uint32(unsafe.Sizeof(wcx))
	wcx.HInstance = hInst
	wcx.Style = me.ClassStyle
	wcx.HIcon = me.HIcon
	wcx.HIconSm = me.HIconSmall

	if me.HCursor != 0 {
		wcx.HCursor = me.HCursor
	} else {
		wcx.HCursor = api.HINSTANCE(0).LoadCursor(co.IDC_ARROW)
	}

	if me.HBrushBackground != 0 {
		wcx.HbrBackground = me.HBrushBackground
	} else {
		wcx.HbrBackground = api.CreateSysColorBrush(co.COLOR_BTNFACE)
	}

	if me.ClassName == "" {
		me.ClassName = wcx.Hash() // generate hash after all other fields are set
	}
	wcx.LpszClassName = api.StrToUtf16Ptr(me.ClassName)

	return &wcx
}
