/**
 * Part of Wingows - Win32 API layer for Go
 * https://github.com/rodrigocfd/wingows
 * This library is released under the MIT license.
 */

package ui

import (
	"unsafe"
	"wingows/api"
)

// Custom user control.
// Allows message and notification handling.
type WindowControl struct {
	windowBase
	controlIdGuard
	setup windowControlSetup // Parameters that will be used to create the window.
}

// Optional; returns a WindowControl with a specific control ID.
func MakeWindowControl(ctrlId api.ID) WindowControl {
	return WindowControl{
		controlIdGuard: makeCtrlIdGuard(ctrlId),
	}
}

// Exposes parameters that will be used to create the child window control.
func (me *WindowControl) Setup() *windowControlSetup {
	me.setup.initOnce() // guard
	return &me.setup
}

// Creates the child window control.
func (me *WindowControl) Create(parent Window, x, y int32, width, height uint32) {
	me.setup.initOnce() // guard
	hInst := parent.Hwnd().GetInstance()
	me.windowBase.registerClass(me.setup.genWndClassEx(hInst))

	me.windowBase.OnMsg().WmNcPaint(func(p WmNcPaint) { // default WM_NCPAINT handling
		me.paintThemedBorders(p.base)
	})

	x, y, width, height = multiplyByDpi(x, y, width, height)

	me.windowBase.createWindow("WindowControl", me.setup.ExStyle,
		me.setup.ClassName, "", me.setup.Style, x, y, width, height, parent,
		api.HMENU(me.controlIdGuard.CtrlId()), hInst)
}

func (me *WindowControl) paintThemedBorders(p wmBase) {
	me.Hwnd().DefWindowProc(api.WM_NCPAINT, p.WParam, p.LParam) // make system draw the scrollbar for us

	if (me.Hwnd().GetExStyle()&api.WS_EX_CLIENTEDGE) == 0 || // has no border
		!api.IsThemeActive() ||
		!api.IsAppThemed() {

		return
	}

	rc := me.Hwnd().GetWindowRect() // window outmost coordinates, including margins
	me.Hwnd().ScreenToClientRc(rc)
	rc.Left += 2 // manual fix, because it comes up anchored at -2,-2
	rc.Top += 2
	rc.Right += 2
	rc.Bottom += 2

	hdc := me.Hwnd().GetWindowDC()
	defer me.Hwnd().ReleaseDC(hdc)

	hTheme := me.Hwnd().OpenThemeData("LISTVIEW") // borrow style from listview
	if hTheme != 0 {
		// Clipping region; will draw only within this rectangle.
		// Draw only the borders to avoid flickering.
		rc2 := api.RECT{Left: rc.Left, Top: rc.Top, Right: rc.Left + 2, Bottom: rc.Bottom}
		hTheme.DrawThemeBackground(hdc, api.LVP_LISTGROUP, 0, rc, &rc2) // draw themed left border

		rc2 = api.RECT{Left: rc.Left, Top: rc.Top, Right: rc.Right, Bottom: rc.Top + 2}
		hTheme.DrawThemeBackground(hdc, api.LVP_LISTGROUP, 0, rc, &rc2) // draw themed top border

		rc2 = api.RECT{Left: rc.Right - 2, Top: rc.Top, Right: rc.Right, Bottom: rc.Bottom}
		hTheme.DrawThemeBackground(hdc, api.LVP_LISTGROUP, 0, rc, &rc2) // draw themed right border

		rc2 = api.RECT{Left: rc.Left, Top: rc.Bottom - 2, Right: rc.Right, Bottom: rc.Bottom}
		hTheme.DrawThemeBackground(hdc, api.LVP_LISTGROUP, 0, rc, &rc2) // draw themed bottom border

		hTheme.CloseThemeData()
	}
}

//------------------------------------------------------------------------------

type windowControlSetup struct {
	wasInit bool // default to false

	ClassName        string      // Optional, defaults to a hash generated by WNDCLASSEX parameters. Passed to RegisterClassEx.
	ClassStyle       api.CS      // Window class style, passed to RegisterClassEx.
	HCursor          api.HCURSOR // Window cursor, passed to RegisterClassEx.
	HBrushBackground api.HBRUSH  // Window background brush, passed to RegisterClassEx.

	Style   api.WS    // Window style, passed to CreateWindowEx.
	ExStyle api.WS_EX // Window extended style, passed to CreateWindowEx. For a border, use WS_EX_CLIENTEDGE
}

func (me *windowControlSetup) initOnce() {
	if !me.wasInit {
		me.wasInit = true

		me.ClassStyle = api.CS_DBLCLKS

		me.Style = api.WS_CHILD | api.WS_VISIBLE | api.WS_CLIPCHILDREN | api.WS_CLIPSIBLINGS
		me.ExStyle = api.WS_EX(0)
	}
}

func (me *windowControlSetup) genWndClassEx(
	hInst api.HINSTANCE) *api.WNDCLASSEX {

	wcx := api.WNDCLASSEX{}

	wcx.CbSize = uint32(unsafe.Sizeof(wcx))
	wcx.HInstance = hInst
	wcx.Style = me.ClassStyle

	if me.HCursor != 0 {
		wcx.HCursor = me.HCursor
	} else {
		wcx.HCursor = api.HINSTANCE(0).LoadCursor(api.IDC_ARROW)
	}

	if me.HBrushBackground != 0 {
		wcx.HbrBackground = me.HBrushBackground
	} else {
		wcx.HbrBackground = api.CreateSysColorBrush(api.COLOR_WINDOW)
	}

	if me.ClassName == "" {
		me.ClassName = wcx.Hash() // generate hash after all other fields are set
	}
	wcx.LpszClassName = api.StrToUtf16Ptr(me.ClassName)

	return &wcx
}
